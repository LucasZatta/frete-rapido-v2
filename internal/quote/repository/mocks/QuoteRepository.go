// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	models "github.com/lucaszatta/frete-rapido-v2/internal/quote/models"
	mock "github.com/stretchr/testify/mock"
)

// QuoteRepository is an autogenerated mock type for the QuoteRepository type
type QuoteRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: quotes
func (_m *QuoteRepository) Create(quotes *[]models.Quote) error {
	ret := _m.Called(quotes)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*[]models.Quote) error); ok {
		r0 = rf(quotes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLastQuotes provides a mock function with given fields: lastQuotes
func (_m *QuoteRepository) GetLastQuotes(lastQuotes string) (*[]models.LastQuotes, error) {
	ret := _m.Called(lastQuotes)

	if len(ret) == 0 {
		panic("no return value specified for GetLastQuotes")
	}

	var r0 *[]models.LastQuotes
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*[]models.LastQuotes, error)); ok {
		return rf(lastQuotes)
	}
	if rf, ok := ret.Get(0).(func(string) *[]models.LastQuotes); ok {
		r0 = rf(lastQuotes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.LastQuotes)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(lastQuotes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMaxMinQuotes provides a mock function with given fields:
func (_m *QuoteRepository) GetMaxMinQuotes() (*models.Quote, *models.Quote, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMaxMinQuotes")
	}

	var r0 *models.Quote
	var r1 *models.Quote
	var r2 error
	if rf, ok := ret.Get(0).(func() (*models.Quote, *models.Quote, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *models.Quote); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Quote)
		}
	}

	if rf, ok := ret.Get(1).(func() *models.Quote); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.Quote)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewQuoteRepository creates a new instance of QuoteRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuoteRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *QuoteRepository {
	mock := &QuoteRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
